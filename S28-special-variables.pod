=head1 Name

 [DRAFT] Synopsis 28 - Special Variables [DRAFT]

=head1 Version

 Author:        Larry Wall <larry@wall.org>
 Maintainer:    Larry Wall <larry@wall.org>
 Contributions: Tim Nelson <wayland@wayland.id.au>
 Date:          23 Feb 2009, created from miscellaneous documents lying around
 Last Modified: 23 Feb 2009
 Version:       3

=head1 Introduction

This document serves as a collection point 
for what is known about special variables 
in Perl 6 and correlates them with the changes from Perl 5. 

If you are trying to find the Perl 6 equivalent of a Perl 5 special
variable you know, try searching this file for the Perl 5 version.
Each main entry is followed by a note containing the corresponding
Perl 5 variable(s). The list of main entries is also followed by 
a table showing the 5 and 6 variables side-by-side.

=head1 Overview

=head2 Secondary Sigils (also known as "twigils"):

A quick reminder of the relevant twigils:

    $?foo   # Lexically-scoped (compile time, see S02)
    $*foo   # Contextualiseable Global variable (run time, see S02)
    $=foo   # File-scoped (see S02) 

XXX Something else claimed that $=foo was a POD variable; Larry says it's not 
well-defined, yet, and we're waiting on Damian to write S26 before we'll know what's going 
on XXX

=head2 Named variables (see S02):

 Variable            Spec  Description
 --------            ----  -----------

 $/                  S05   # match object from last match
 $0, $1, $2          S05   # first captured value from match: $/[0]
 @*ARGS              S06   # command-line arguments
 &?BLOCK             S06   # current block (itself)
 ::?CLASS                  # current class (as package name)
 $?CLASS                   # current class (as variable)
 %?CONFIG                  # configuration hash
 $=DATA                    # data block handle (=begin DATA ... =end)
 $*EGID                    # effective group id
 %*ENV                     # system environment
 $*ERR               S16   # Standard error handle; is an IO object
 $*EUID                    # effective user id
 $*EXECUTABLE_NAME         # executable name
 $?FILE                    # current filename of source file
 $?GRAMMAR                 # current grammar
 $*GID                     # group id
 $*IN                S16   # Standard input handle; is an IO object
 $?LABEL                   # label of current block
 $?LINE                    # current line number in source file
 $?MODULE                  # current module
 %*OPTS              S19   # Options from command line
 %*OPT...            S19   # Options from command line to be passed down
 %*OPTS              S19   # Options from command line
 %*OPT...            S19   # Options from command line to be passed down
 $?OS                      # operating system compiled for
 $*OS                      # operating system running under
 $?OSVER                   # operating system version compiled for
 $*OSVER                   # operating system version running under
 $*OUT               S16   # Standard output handle; is an IO object
 $?PACKAGE                 # current package (as object)
 $?PACKAGENAME       S10   # name of current package
 $?PERLVER                 # perl version compiled for
 $*PERLVER                 # perl version running under
 $*PROGRAM_NAME            # name of the program being executed
 $*PID                     # system process id
 ::?ROLE                   # current role (as package name)
 $?ROLE                    # current role (as variable)
 &?ROUTINE           S06   # current sub or method (itself)
 $*STDERR            S16   # standard error handle; is an IO object
 $*STDIN             S16   # standard input handle; is an IO object
 $*STDOUT            S16   # standard output handle; is an IO object
 $*UID                     # system user id

Note that contextual variables such as C<$*OUT> may have more than
one current definition in the outer dynamic context, in which case
the innermost dynamic scope determines the meaning.  For instance,
C<$PROCESS::OUT> is the stdout for the entire process, but each
interpreter can set its own C<$GLOBAL::OUT> to make C<$*OUT> mean
whatever it wants independently of other interpreters.  Any dynamic
scope may also declare a local meaning of C<$*OUT> that applies only
to called code.  Likewise each thread could log its own errors
to its own C<$*ERR>, since a thread is a dynamic scope.

=head1 Special Variables

This section only lists variables that don't have a "See S16" or suchlike next to them in 
the overview above.  

XXX Some of the information here is either old, or needs to be moved elsewhere.  XXX

=over 8

=item $a, $b, $c ...

Parameters of the current closure (block 
or subroutine) by position in the invocation.

XXX This needs to go under "Closures".  XXX

=over 4
 
=item p5:

$_[0], $_[1], $_[2] ...

=back

=back

=over 8

=item $*MOST_RECENT_CAPTURED_MATCH
=item $/[-1]
=item $/[-$n]

It's not clear yet which of these would be used.
Or whether to drop this.

=over 4 

=item p5:

$^N

=back

=back

=head1 PERL 6 / PERL 5 COMPARISON

=over 4

Because a blank entry in either column could be taken to mean either 
"not in Perl 6" or "unknown", the information as presented 
below presumes an entry in both columns for every entry. 
Options are:

=over 6

thing  as the var in question

-      for "not in this Perl"

?      for "don't know yet"

=back

Other organizational
schemes may become appropriate when the table is more complete.

=back

 Perl 5              Perl 6         Comment
 -----------         -----------    -----------------------
 STDIN               $*IN           See S16; actual variable is $PROCESS::IN
 STDOUT              $*OUT          See S16; actual variable is $PROCESS::OUT
 STDERR              $*ERR          See S16; actual variable is $PROCESS::ERR
 $_                  $_             More lexically aware
 $_[1],$_[2]..       $^a,$^b..  
 $a,$b               -              Just params to anonymous block
 -                   $/             Object with results of last regex match
 $1,$2,$3...         $1,$2,$3...
 $&, $MATCH          $<>
 $`, $PREMATCH       substr based on $/.from
 $', $POSTMATCH      substr based on $/.to
 $+                  -              But info can now be retrieved from $/
 $^N                 $*MOST_RECENT_CAPTURED_MATCH  ...or some such. 
                  or $/[-$n]                       ...or omit 
 @-                  $1.start, etc
 @+                  $1.end, etc.
 $*                  -
 $#                  -
 $.                  $*IN.input_record_number()
 $/                  $*IN.input_record_separator()
 $|                  $*OUT.autoflush()
 $,                  $*OUT.output_field_separator()
 $\                  $*OUT.output_record_separator()
 $$, $PID            $*PID
 $<, $UID            $*UID          Real UID (User ID)
 $(, $GID            $*GID          Real GID (Group ID)
 $>, $EUID           $*EUID         Effective UID
 $), $EGID           $*EGID         Effective GID
 $0, $PROGRAM_NAME   $*PROGRAM_NAME
 $^C, $COMPILING     $*COMPILING
 $^D, $DEBUGGING     $*DEBUGGING
 $^F, $SYS_FD_MAX    $*SYS_FD_MAX   ...or some such
 $^I, $INPLACE_EDIT  $*INPLACE_EDIT ...or some such
 $^M                 $*EMERGENCY_MEMORY ...or some such (or omit)
 $^O, $OSNAME        $*OSNAME       ...or some such
 $^P, $PERLDB        $*PERLDB       ...or some such
 $^R                 $*LAST_REGEXP_CODE_RESULT   ...or some such. Or omit.
 $^T, $BASETIME      $*BASETIME     A Temporal::Instant object
 ${^WARNING_BITS}    $?WARNINGS
 $^X                 $*EXECUTABLE_NAME ...or some such
 $EXECUTABLE_NAME

 ******* XXX the columns seem to have switched! *********

 -       $"  $LIST_SEPARATOR

 -       $;  $SUBSEP $SUBSCRIPT_SEPARATOR

 ?       ${^ENCODING}

 $!                     Universal error object with as much info as
                        you'd like on the current exception (unthrown 
                        outside of CATCH, thrown inside).  Unthrown 
                        exceptions are typically interesting values 
                        of undef.
 -       $!  $ERRNO $OS_ERROR
 -       $?  $CHILD_ERROR
 -       $@  $EVAL_ERROR
 -       $^E $EXTENDED_OS_ERROR

 -       %!

 -       $[             Index of the first element in an array, 
                        and of the first character in a substring.

 
 -       $^V $PERL_VERSION
 -       $]             version + patchlevel / 1000 of Perl interpreter
                        Replacement for the above two is unclear.

 -       $^H
 -       %^H

 -       ${^OPEN}

 ?       ${^TAINT}
 ?       ${^UNICODE}

 -       $^W $WARNING   Probably gone. But we need a reasonably
                        granular way to suppress specific (groups
                        of) warnings within both lexical and 
                        dynamic scopes.

 ?       $ARGV
 
 $*ARGS  ARGV        Note the P6 idiom: 
                        for =$*ARGS { 
                           # each time through loop
                           # proc a line from files named in ARGS 
                        }

 @*ARGS  @ARGV

 $*ARGVOUT
         ARGVOUT

 @*INPLACE_AUTOSPLIT_FIELDS   ..or some such
         @F

 ?       @INC        Uncertain but we need a way to add to search path
 ?       %INC        Uncertain but we need a way to add to search path

 ?       @_


 %*ENV   %ENV        Or %ENV

 %*SIG   %SIG        Or possibly &*ON_SIGINT, etc. But then we'd need 
                     to add some signal introspection in another way.

 &*ON_WARN __WARN__
 &*ON_DIE  __DIE__
 &*ON_PARSEERROR
 -       $^S $EXCEPTIONS_BEING_CAUGHT


XXX Everything below this line is older than everything above it.  XXX

=head1 OUTLINE

 SPECIAL VARIABLES
 PERL 6 / PERL 5 COMPARISON
 HISTORY
 SOURCES

=head1 SOURCES

At its present stage of development this file
draws on a few key sources: Perl 5's perlvar.pod (for a full list of special
vars in Perl 5) and a perl6-language list thread documented 
below. E02 and S02 have also been helpful in several cases.

A key resource in compiling the new material above 
has been a thread on the perl6-language
email list which can be found at: 

  http://www.mail-archive.com/perl6-language@perl.org/msg18609.html

For our present purposes, the most helpful item in that thread is the 
head post found at the url given above. 
It is an item by Larry Wall which is reproduced here:
_________________________________________________________________

 Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
 Date: Sat, 26 Mar 2005 00:27:24 -0800
 From: Larry Wall <larry@wall.org>
 To: perl6-compiler@perl.org
 Cc: perl6-language@perl.org
 Subject: S28ish [was: [Pugs] A couple of string interpolation edge cases]
 
 On Sat, Mar 26, 2005 at 02:11:29PM +0800, Audrey Tang wrote:
 : On Fri, Mar 25, 2005 at 10:03:45PM -0800, Larry Wall wrote:
 : > Hmm, well, if it got that far.  Given strict being on by default,
 : > this particular example should probably just die on the fact that $"
 : > isn't declared, since there's no $" in Perl 6.
 : 
 : Is $" okay as a variable name?  Is everything from perlvar.pod legal? :)
 
 Considering nobody's written perlvar.pod for Perl 6 yet, yeah, everything
 in that pod is legal.  :-)
 
 :     my $" = 3;
 : 
 : Pugs parses that because it only considers $! and $/ as legal
 : symbolic variable names.
 
 $! will be a legal variable name.  $/ is going away, as is $", which
 means they fail under "use strict", but they'd still autocreate
 globals under laxity as Perl 5 does.  (I know Perl 5 exempted all
 special variables from strict, but I don't see why we have to do
 that for Perl 6.  Merely having $_ in the lexical scope or $*! in the
 global scope should be sufficient declaration to get around strict.
 Though perhaps we can exempt people from having to write $*! under
 strict.  In fact, that probably goes for all predeclared $* names,
 so $IN is legal for $*IN as long as you don't have "my $IN" hiding
 it.  Another way to look at it is that * variables are basically
 autodeclared "our" implicitly in the outermost lexical scope.)
 
 Sigh, I'd better rough it all in here, even if I don't have time to
 do a good job on it.  Maybe somebody can beat this into a real S28 pod.
 
 $? and $@ are gone, merged in with $!.  (Frees up ? twigil for $?FOO
 syntax.)  $^E is merged too.  $! is an object with as much info as
 you'd like on the current exception (unthrown outside of CATCH, thrown
 inside).  Unthrown exceptions are typically interesting values of undef.
 
 $$ is now $*PID.  ($$foo is now unambiguous.)
 
 $0 is gone in favor of $*PROGRAM_NAME or some such.
 
 Anything that varied with the selected output filehandle like $|
 is now a method on that filehande, and the variables don't exist.
 (The p5-to-p6 translator will probably end up depending on some
 $Perl5ish::selected_output_filehandle variable to emulate Perl 5's
 single-arg select().)  Likewise $/ and $. should be attached to
 a particular input filehandle.  (In fact, $/ is now the result of
 the last regular expression match, though we might keep the idea of
 $. around in some form or other just because it's awfully handy for
 error messages.  But the localizing $. business is yucky.  We have
 to clean that up.)
 
 All the special format variables ($%, $=, $-, $:, $~, $^, $^A, $^L)
 are gone.  (Frees up the = twigil for %= POD doc structures and
 old __DATA__ stream, the : twigil for private attributes, and the ~
 twigil for autodeclared parameters.)
 
 $`, $', and $+ don't exist any more, but you can dig that info out
 of $/'s structures.  Shortcuts into $/ include $1, $2, and such, and
 the newfangled $<foo> things.  Also, $& is changed to $0 for the whole
 matched string.  $` and $' may be $<pre> and $<post>, but you probably
 have to explicitly match <pre> and <post> to get them remembered,
 so we don't have a repeat of the Perl 5 sawampersand fiasco.  <pre>
 and <post> would automatically exclude themselves from $0.  Or you
 need some special flag to remember them, maybe.
 
 %+ and %- are gone.  $0, $1, $2,  etc. are all objects that know
 where they .start and .end.  (Mind you, those methods return magical
 positions that are Unicode level independent.)
 
 $* and $# have been deprecated half of forever and are gone.  $[
 is a fossil that I suppose could turn into an evil pragma, if we
 try to translate it at all.  (Frees up * twigil for $*FOO syntax.)
 
 $(, $), $<, and $> should all change to various $*FOO names.  $] is either
 something in $* or a trait of the Perl namespace.  Likewise $^V, if
 they aren't in fact merged.
 
 ${...} is reserved for hard refs only now.  ($::(...) must be used
 for symbolics refs.)  ${^foo} should just change to $*foo or $*_foo
 or some such.
 
 $; is gone because the multidim hash hack is gone.  $" is gone,
 replaced by @foo.join(":") or some such.  Likewise for $, in print
 statements.
 
 We never did find a use for $}, thank goodness.
 
 And we still are keeping $_ around, though it's lexically scoped.
 
 Let's see, what other damage can we do to perlvar.  $a and $b are
 no longer special.  No bareword filehandles.  $*IN, $*OUT, $*ERR.
 Args come in @*ARGS rather than @ARGV.  (Environment still in %ENV,
 will wonders never cease.)  I don't know whether @INC and %INC will
 make as much sense when we're looking installed modules in a database,
 though I suppose you still have to let the user add places to look.
 
 %SIG is now %*SIG.  The __DIE__ and __WARN__ hooks should be brought
 out as separate &*ON_DIE and &*ON_WARN variables--they really
 have nothing to do with signals.  I suppose we could even do away
 with %SIG and replace it with &*ON_SIGINT and such, though then we'd
 lose a bit of signal introspection which would have to be provided
 some other way.  Oh, and we probably ought to split out &?ON_PARSEERROR
 from $*ON_DIE to get rid of the $^S fiasco of Perl 5.
 
 $^C, $^D, $^F, $^I, $^M, $^O, $^P, $^S, $^T, $^V, $^X are all renamed
 to something $*FOOish, at least the ones that aren't going away entirely.
 
 $^W is is too blunt an instrument even in Perl 5, so it's probably gone.
 
 I'm not quite sure what to do with $^N or $^R yet.  Most likely they
 end up as something $<foo>ish, if they stay.
 
 You weren't ever supposed to know about $^H and %^H.  Or %{^FNORD}...
 
 Other things might show up as global variables in support of
 command-line options, like $*ARGVOUT or @*F.  Some of the special
 variables we've blissfull relegated to the trash heap might
 creep back in as global variables that just happen to know about
 $*Perl5ish::current_selected_filehandle and such, but we should
 probably try to keep them as lvalue subs in &Perl5ish::ors() and such.
 
 Anyway, it's all negotiable, except for the parts that aren't.
 
 Larry

=cut


=encoding utf8

=head1 TITLE

Synopsis 2: Bits and Pieces

S02

=head1 AUTHOR

Larry Wall <larry@wall.org>

=head1 VERSION

  Maintainer: Larry Wall <larry@wall.org>
  Date: 10 Aug 2004
  Last Modified: 20 Feb 2009
  Number: 2
  Version: 153

=item *

Many of the special variables of Perl 5 are going away.  Those that
apply to some object such as a filehandle will instead be attributes
of the appropriate object.  Those that are truly global will have
global alphabetic names, such as C<$*PID> or C<@*ARGS>. 

=item *

Any remaining special variables will be lexically scoped.
This includes C<$_> and C<@_>, as well as the new C<$/>, which
is the return value of the last regex match.  C<$0>, C<$1>, C<$2>, etc.,
are aliases into the C<$/> object.

=item *

The following pseudo-package names are reserved at the front of a name:

    MY          # Symbols in the current lexical scope (aka $?SCOPE)
    OUR         # Symbols in the current package (aka $?PACKAGE)

=item *

When "strict" is in effect (which is the default except for one-liners),
non-qualified variables (such as C<$x> and C<@y>) are only looked up from
lexical scopes, but never from package scopes.

To bind package variables into a lexical scope, simply say C<our ($x, @y)>.
To bind global variables into a lexical scope, predeclare them with C<use>:

    use GLOBAL <$IN $OUT>;

Or just refer to them as C<$*IN> and C<$*OUT>.

=item *

The C<CALLER> package refers to the lexical scope of the (dynamically
scoped) caller.  The caller's lexical scope is allowed to hide any
user-defined variable from you.  In fact, that's the default, and a
lexical variable must have the trait "C<is context>" to be
visible via C<CALLER>.  (C<$_>, C<$!> and C<$/> are always
contextual.) If the variable is not visible in the caller, it returns
failure.  Variables whose names are visible at the point of the call but that
come from outside that lexical scope are controlled by the scope
in which they were originally declared as contextual.
Hence the visibility of C<< CALLER::<$*foo> >> is determined where
C<$*foo> is actually declared, not by the caller's scope (unless that's where
it happens to be declared).  Likewise C<< CALLER::CALLER::<$x> >>
depends only on the declaration of C<$x> visible in your caller's caller.

Any lexical declared with the C<is context> trait is by default
considered readonly outside the current lexical scope.  You may
add a trait argument of C<< <rw> >> to allow called routines to
modify your value.  C<$_>, C<$!>, and C<$/> are C<< context<rw> >>
by default.  In any event, the declaring scope can always access the
variable as if it were an ordinary variable; the restriction on writing
applies only to access via the C<*> twigil.

=item *

The C<CONTEXT> pseudo-package is just like C<CALLER> except that
it starts in the current dynamic scope and from there
scans outward through all dynamic scopes until it finds a
contextual variable of that name in that context's lexical scope.
(Use of C<$*FOO> is equivalent to C<< CONTEXT::<$FOO> >> or C<< $CONTEXT::FOO >>.)
If after scanning all the lexical scopes of each dynamic scope,
there is no variable of that name, it looks in the C<GLOBAL> package followed
by the C<PROCESS> package.
If there is no such package variable,
it then looks in C<CONTEXT::<%ENV> for the identifier of the variable,
which, if not overridden in a dynamic scope, finds C<< PROCESS::<%ENV> >>,
that is, in the environment variables passed to program.  If the
value is not found there, it returns failure.  If the variable is
of the form C<$*FOO>, the complete environment value is returned.  If it
is of the form C<@*FOO> the string will be split either on colons or
semicolons as appropriate to the current operating system.  Usage of
the C<%*FOO> form is currently undefined.

Unlike C<CALLER>, C<CONTEXT> will see a contextual variable that is declared in
the current scope, however it will not be writeable via C<CONTEXT> unless
declared "C<< is context<rw> >>", even if the variable itself is
modifiable in that scope.  (If it is, you should just use the bare
variable itself to modify it.)  Note that C<$*_> will always see
the C<$_> in the current scope, not the caller's scope.  You may
use C<< CALLER::<$*foo> >> to bypass a contextual definition of C<$foo>
in your current context, such as to initialize it with the outer
contextual value:

    my $foo is context = CALLER::<$*foo>;

The C<temp> maybe used on a contextual variable to perform a similar operation:

    temp $*foo;

The main difference is that by default it initializes the new
C<$*foo> with its previous value, rather than the caller's value.
The temporized contextual variable takes its read/write policy from
the previous C<$*foo> container.

The C<CONTEXT> package is primarily for internal overriding of contextual
information, modelled on how environmental variables work among
processes.  Despite the fact that the C<CONTEXT> package reflects the
current process's environment variables individually where those are not
hidden by lower-level declarations, the actual set of environment variables
that will be passed to subprocesses is taken from the C<%*ENV> variable.
Hence you must override that variable itself to influence what is
passed to subprocesses.  That is,

    temp $*LANG = "ja_JP.utf8";   # WRONG
    run "greet";

does not set the LANG environment variable for the greet program.  Instead
you should make a private copy of the environment and modify that:

    temp %*ENV;
    %*ENV<LANG> = "ja_JP.utf8";   # ok
    run "greet";

=item *

There is no longer any special package hash such as C<%Foo::>.  Just
subscript the package object itself as a hash object, the key of which
is the variable name, including any sigil.  The package object can
be derived from a type name by use of the C<::> postfix:

    MyType::<$foo>

(Directly subscripting the type with either square brackets or curlies
is reserved for various generic type-theoretic operations.  In most other
matters type names and package names are interchangeable.)

Typeglobs are gone.  Use binding (C<:=> or C<::=>) to do aliasing.
Individual variable objects are still accessible through the
hash representing each symbol table, but you have to include the
sigil in the variable name now: C<MyPackage::{'$foo'}> or the
equivalent C<< MyPackage::<$foo> >>.

=item *

Truly global variables live in the C<*> package: C<$*UID>, C<%*ENV>.
(The C<*> may be omitted if you import the name from the C<GLOBAL>
package.)  C<$*foo> is short for C<$*::foo>, suggesting that the
variable is "wild carded" into every package.

=item *

For an ordinary Perl program running by itself, the C<GLOBAL> and
C<PROCESS> namespaces are considered synonymous.  However, in certain
situations (such as shared hosting under a webserver), the actual
process may contain multiple virtual processes, each running its own
"main" code.  In this case, the C<GLOBAL> namespace holds variables
that properly belong to the individual virtual process, while the
C<PROCESS> namespace holds variables that properly belong to the actual
process as a whole.  From the viewpoint of the C<GLOBAL> namespace
there is little difference, since process variables that normally
appear in C<GLOBAL> are automatically imported from C<PROCESS>.
However, the process as a whole may place restrictions on the
mutability of process variables as seen by the individual subprocesses.
Also, individual subprocesses may not create new process variables.
If the process wishes to grant subprocesses the ability to communicate
via the C<PROCESS> namespace, it must supply a writeable variable
to all the subprocesses granted that privilege.

When these namespaces are so distinguished, the C<*> shortcut always refers
to C<GLOBAL>.  There is no twigil shortcut for C<PROCESS>.

=item *

The magic command-line input handle is C<$*ARGFILES>.
The arguments themselves come in C<@*ARGS>.  See also "Declaring a MAIN
subroutine" in S06.

=item *

Magical file-scoped values live in variables with a C<=> secondary
sigil.  C<$=DATA> is the name of your C<DATA> filehandle, for instance.
All pod structures are available through C<%=POD> (or some such).
As with C<*>, the C<=> may also be used as a package name: C<$=::DATA>.

=item *

Magical lexically scoped values live in variables with a C<?> secondary
sigil.  These are all values that are known to the compiler, and may
in fact be dynamically scoped within the compiler itself, and only
appear to be lexically scoped because dynamic scopes of the compiler
resolve to lexical scopes of the program.  All C<$?> variables are considered
constants, and may not be modified after being compiled in.  The user
is also allowed to define or (redefine) such constants:

    constant $?TABSTOP = 4;     # assume heredoc tabs mean 4 spaces

(Note that the constant declarator always evaluates its initialization
expression at compile time.)

C<$?FILE> and C<$?LINE> are your current file and line number, for
instance.  C<?> is not a shortcut for a package name like C<*> is.
Instead of C<$?OUTER::SUB> you probably want to write C<< OUTER::<$?SUB> >>.
Within code that is being run during the compile, such as C<BEGIN> blocks, or
macro bodies, or constant initializers, the compiler variables must be referred
to as (for instance) C<< COMPILING::<$?LINE> >> if the bare C<$?LINE> would
be taken to be the value during the compilation of the currently running
code rather than the eventual code of the user's compilation unit.  For
instance, within a macro body C<$?LINE> is the line within the macro
body, but C<< COMPILING::<$?LINE> >> is the line where the macro was invoked.
See below for more about the C<COMPILING> pseudo package.

Here are some possibilities:

    $?FILE      Which file am I in?
    $?LINE      Which line am I at?
    $?PARSER    Which Perl grammar was used to parse this statement?
    $?LANG      Which Perl parser should embedded closures parse with?
    &?ROUTINE   Which routine am I in?
    @?ROUTINE   Which nested routines am I in?
    &?BLOCK     Which block am I in?
    @?BLOCK     Which nested blocks am I in?
    $?LABEL     Which innermost block label am I in?
    @?LABEL     Which nested block labels am I in?

All the nested C<@?> variables are ordered from the innermost to the
outermost, so C<@?BLOCK[0]> is always the same as C<&?BLOCK>.

The following return objects that contain all pertinent info:

    $?OS        Which operating system am I compiled for?
    $?DISTRO    Which OS distribution am I compiling under
    $?VM        Which virtual machine am I compiling under
    $?XVM       Which virtual machine am I cross-compiling for
    $?PERL      Which Perl am I compiled for?
    $?SCOPE     Which lexical scope am I in?
    $?PACKAGE   Which package am I in?
    @?PACKAGE   Which nested packages am I in?
    $?MODULE    Which module am I in?
    @?MODULE    Which nested modules am I in?
    $?CLASS     Which class am I in? (as variable)
    @?CLASS     Which nested classes am I in?
    $?ROLE      Which role am I in? (as variable)
    @?ROLE      Which nested roles am I in?
    $?GRAMMAR   Which grammar am I in?
    @?GRAMMAR   Which nested grammars am I in?

It is relatively easy to smartmatch these constant objects
against pairs to check various attributes such as name,
version, or authority:

    given $?VM {
        when :name<Parrot> :ver(v2) { ... }
        when :name<CLOS>            { ... }
        when :name<SpiderMonkey>    { ... }
        when :name<JVM> :ver(v6.*)  { ... }
    }

Matches of constant pairs on constant objects may all be resolved at
compile time, so dead code can be eliminated by the optimizer.

Note that some of these things have parallels in the C<*> space at run time:

    $*OS        Which OS I'm running under
    $*DISTRO    Which OS distribution I'm running under
    $*VM        Which VM I'm running under
    $*PERL      Which Perl I'm running under

You should not assume that these will have the same value as their
compile-time cousins.

=item *

While C<$?> variables are constant to the run time, the compiler
has to have a way of changing these values at compile time without
getting confused about its own C<$?> variables (which were frozen in
when the compile-time code was itself compiled).  The compiler can
talk about these compiler-dynamic values using the C<COMPILING> pseudopackage.

References to C<COMPILING> variables are automatically hoisted into the
context currently being compiled.  Setting or temporizing a C<COMPILING>
variable sets or temporizes the incipient C<$?> variable in the
surrounding lexical context that is being compiled.  If nothing in
the context is being compiled, an exception is thrown.

    $?FOO // say "undefined";   # probably says undefined
    BEGIN { COMPILING::<$?FOO> = 42 }
    say $?FOO;                  # prints 42
    {
        say $?FOO;              # prints 42
        BEGIN { temp COMPILING::<$?FOO> = 43 } # temporizes to *compiling* block
        say $?FOO;              # prints 43
        BEGIN { COMPILING::<$?FOO> = 44 }
        say $?FOO;              # prints 44
        BEGIN { say COMPILING::<$?FOO> }        # prints 44, but $?FOO probably undefined
    }
    say $?FOO;                  # prints 42 (left scope of temp above)
    $?FOO = 45;                 # always an error
    COMPILING::<$?FOO> = 45;    # an error unless we are compiling something

Note that C<< CALLER::<$?FOO> >> might discover the same variable
as C<COMPILING::<$?FOO>>, but only if the compiling context is the
immediate caller.  Likewise C<< OUTER::<$?FOO> >> might or might not
get you to the right place.  In the abstract, C<COMPILING::<$?FOO>>
goes outwards dynamically until it finds a compiling scope, and so is
guaranteed to find the "right" C<$?FOO>.  (In practice, the compiler
hopefully keeps track of its current compiling scope anyway, so no
scan is needed.)

Perceptive readers will note that this subsumes various "compiler hints"
proposals.  Crazy readers will wonder whether this means you could
set an initial value for other lexicals in the compiling scope.  The
answer is yes.  In fact, this mechanism is probably used by the
exporter to bind names into the importer's namespace.

=item *

The currently compiling Perl parser is switched by modifying
C<< COMPILING::<$?PARSER> >>.  Lexically scoped parser changes
should temporize the modification.  Changes from here to
end-of-compilation unit can just assign or bind it.  In general,
most parser changes involve deriving a new grammar and then pointing
C<< COMPILING::<$?PARSER> >> at that new grammar.  Alternately, the
tables driving the current parser can be modified without derivation,
but at least one level of anonymous derivation must intervene from
the standard Perl grammar, or you might be messing up someone else's
grammar.  Basically, the current grammar has to belong only to the
current compiling scope.  It may not be shared, at least not without
explicit consent of all parties.  No magical syntax at a distance.
Consent of the governed, and all that.

=item *

The double-underscore forms are going away:

    Old                 New
    ---                 ---
    __LINE__            $?LINE
    __FILE__            $?FILE
    __PACKAGE__         $?PACKAGE
    __END__             =begin END
    __DATA__            =begin DATA

The C<=begin END> pod stream is special in that it assumes there's
no corresponding C<=end END> before end of file.  The C<DATA>
stream is no longer special--any POD stream in the current file
can be accessed via a filehandle, named as C<< %=POD{'DATA'} >> and such.
Alternately, you can treat a pod stream as a scalar via C<$=DATA>
or as an array via C<@=DATA>.  Presumably a module could read all
its COMMENT blocks from C<@=COMMENT>, for instance.  Each chunk of
pod comes as a separate array element.  You have to split it into lines
yourself.  Each chunk has a C<.range> property that indicates its
line number range within the source file.

The lexical routine itself is C<&?ROUTINE>; you can get its name with
C<&?ROUTINE.name>.  The current block is C<&?BLOCK>.  If the block has any
labels, those shows up in C<&?BLOCK.labels>.  Within the lexical scope of
a statement with a label, the label is a pseudo-object representing
the dynamic context of that statement.  (If inside multiple dynamic
instances of that statement, the label represents the innermost one.)
When you say:

    next LINE;

it is really a method on this pseudo-object, and

    LINE.next;

would work just as well.  You can exit any labeled block early by saying

    MyLabel.leave(@results);

=item *

Heredocs allow optional whitespace both before and after terminating
delimiter.  Leading whitespace equivalent to the indentation of the
delimiter will be removed from all preceding lines.  If a line is
deemed to have less whitespace than the terminator, only whitespace
is removed, and a warning may be issued.  (Hard tabs will be assumed
to be C<< ($?TABSTOP // 8) >> spaces, but as long as tabs and spaces are used consistently
that doesn't matter.)  A null terminating delimiter terminates on
the next line consisting only of whitespace, but such a terminator
will be assumed to have no indentation.  (That is, it's assumed to
match at the beginning of any whitespace.)

=head1 NOT YET DEFINED

The following items are not yet defined, but will need to be defined.  

=head2 Form.pm

These go in the Perl5 to Perl6 conversion table:

 Perl6   Perl5
 -----   -----------------------------------------
 -       $%  $FORMAT_PAGE_NUMBER
 -           HANDLE->format_page_number(EXPR)

 -       $=  $FORMAT_LINES_PER_PAGE
 -           HANDLE->format_lines_per_page(EXPR)

 -       $-  $FORMAT_LINES_LEFT
 -           HANDLE->format_lines_left(EXPR)

 -       $~  $FORMAT_NAME
 -           HANDLE->format_name(EXPR)

 -       $^  $FORMAT_TOP_NAME
 -           HANDLE->format_top_name(EXPR)

 -       $:  $FORMAT_LINE_BREAK_CHARACTERS
 -           IO::Handle->format_line_break_characters

 -       $^L $FORMAT_FORMFEED
 -           IO::Handle->format_formfeed

 -       $^A $ACCUMULATOR


=head1 Additions

Please post errors and feedback to perl6-language.  If you are making
a general laundry list, please separate messages by topic.

=for vim:set expandtab sw=4:
