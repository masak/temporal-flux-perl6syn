=head1 Name

 [DRAFT] Synopsis 28 - Special Variables [DRAFT]

=head1 Version

 Author:        Larry Wall <larry@wall.org>
 Maintainer:    Larry Wall <larry@wall.org>
 Contributions: Tim Nelson <wayland@wayland.id.au>
 Date:          23 Feb 2009, created from miscellaneous documents lying around
 Last Modified: 24 Feb 2009
 Version:       4

=head1 Introduction

This document serves as a collection point 
for what is known about special variables 
in Perl 6 and correlates them with the changes from Perl 5. 

If you are trying to find the Perl 6 equivalent of a Perl 5 special
variable you know, try searching this file for the Perl 5 version.
Each main entry is followed by a note containing the corresponding
Perl 5 variable(s). The list of main entries is also followed by 
a table showing the 5 and 6 variables side-by-side.

=head1 Overview

=head2 Secondary Sigils (also known as "twigils"):

A quick reminder of the relevant twigils from S02:

    $?foo   # Compiler constants (fixed at compile time)
    $*foo   # Context variable, default global (run time)
    $=foo   # File-scoped POD data

The various C<$?foo> variables are determined at compile time, and are
not modifiable at run time.  This does not mean that the variable has the
same value everywhere; for instance, C<$?LINE> is different on every line
of the program.

The C<$*foo> variables function both as dymamically scoped variables
and as globals.  Globalness is relative, in other words.  Any dynamic
scope may modify the set of globals visible via the C<$*foo> notation.
Most of the standard globals listed below actually live either in
the C<PROCESS> or the C<GLOBAL> package, where C<PROCESS> contains
globals belonging to the entire process, while C<GLOBAL> contains the
globals belonging to the current interpreter, since a process may be
running more than one interpreter.  Unless otherwise indicated below,
the outermost definition of these variables are kept in the C<PROCESS>
package.

The C<$=foo> variables are related to the the C<$?foo> variables
insofar as the text of the program is known at compile time, so the
values are static.  However, the different twigil indicates that the
variable contains POD data, which is primarily under user control
rather than compiler control.  The structure of these variables will
be fleshed out in S26.

=head2 Named variables:

 Variable            Spec  Description
 --------            ----  -----------

 $/                  S05   # match object from last match
 $0, $1, $2          S05   # first captured value from match: $/[0]
 @*ARGS              S06   # command-line arguments
 $*ARGFILES          S02   # The magic command-line input handle
 &?BLOCK             S06   # current block (itself)
 ::?CLASS                  # current class (as package or type name)
 $?CLASS                   # current class (as package object)
 @=COMMENT                 # All the comment blocks in the file
 %?CONFIG                  # configuration hash
 $=DATA                    # data block handle (=begin DATA ... =end)
 @=DATA                    # Same as above, but array
 $?DISTRO            S02   # Which OS distribution am I compiling under
 $*EGID                    # effective group id
 %*ENV                     # system environment variables
 $*ERR               S16   # Standard error handle; is an IO object
 $*EUID                    # effective user id
 $*EXECUTABLE_NAME         # executable name
 $?FILE                    # current filename of source file
 $?GRAMMAR                 # current grammar (as object)
 $*GID                     # group id
 $*IN                S16   # Standard input handle; is an IO object
 $*INC               S11   # where to search for user modules (but not std lib!)
 $?LABEL                   # label of current block (XXX unnecessary?)
 $?LINE                    # current line number in source file
 $?MODULE                  # current module (as package object variable)
 %*OPTS              S19   # Options from command line
 %*OPT...            S19   # Options from command line to be passed down
 $?OS                      # operating system compiled for
 $*OS                      # operating system running under
 $?OSVER                   # operating system version compiled for
 $*OSVER                   # operating system version running under
 $*OUT               S16   # Standard output handle; is an IO object
 $?PARSER            S02   # Which Perl grammar was used to parse this statement?
 $?PACKAGE                 # current package (as package object variable)
 $?PERL              S02   # Which Perl am I compiled for?
 $*PERL                    # perl version running under
 $*PID                     # system process id
 %=POD               S02   # (or some such)
 $*PROGRAM_NAME            # name of the Perl program being executed
 ::?ROLE                   # current role (as package or type name)
 $?ROLE                    # current role (as package object variable)
 &?ROUTINE           S06   # current sub or method (itself)
 $?SCOPE             S02   # Current "my" scope (XXX unnecessary?)
 $*UID                     # system user id
 $?VM                S02   # Which virtual machine am I compiling under
 $?XVM               S02   # Which virtual machine am I cross-compiling for

Note that contextual variables such as C<$*OUT> may have more than
one current definition in the outer dynamic context, in which case
the innermost dynamic scope determines the meaning.  For instance,
C<$PROCESS::OUT> is the stdout for the entire process, but each
interpreter can set its own C<$GLOBAL::OUT> to make C<$*OUT> mean
whatever it wants independently of other interpreters.  Any dynamic
scope may also declare a local meaning of C<$*OUT> that applies only
to called code.  Likewise each thread could log its own errors
to its own C<$*ERR>, since a thread is a dynamic scope.

=head1 Special Variables

This section only lists variables that don't have a "See S16" or suchlike next to them in 
the overview above.  

XXX Some of the information here is either old, or needs to be moved elsewhere.  XXX

=head2 Perl5 to Perl6 special variable translation

If a column has a "-" in it, it means that item is unavailable in that version of Perl.  

 Perl 5              Perl 6         Comment
 -----------         -----------    -----------------------
 STDIN               $*IN           See S16; actual variable is $PROCESS::IN
 STDOUT              $*OUT          See S16; actual variable is $PROCESS::OUT
 STDERR              $*ERR          See S16; actual variable is $PROCESS::ERR
 $_ $ARG             $_             More lexically aware
 $_[1],$_[2]..       $^a,$^b..  
 $a,$b               -              Just params to anonymous block
 -                   $/             Object with results of last regex match
 $1,$2,$3...         $1,$2,$3...
 $& $MATCH           $<>
 $` $PREMATCH        substr based on $/.from
 $' $POSTMATCH       substr based on $/.to
 $+                  -              But info can now be retrieved from $/
 $^N                 $*MOST_RECENT_CAPTURED_MATCH  ...or some such. 
                       or $/[*-$n]                       ...or omit 
 @-                  $1.start, etc
 @+                  $1.end, etc.
 %!                  -
 $[                  -              This feature has been removed
 $*                  -              Deprecated long ago
 $#                  -              Deprecated long ago
 $^H                 -              These were only ever internal anyway
 %^H                 -
 -                   $!             Current exception (see L<S04-control>)
 $! $ERRNO $OS_ERROR -              Use shiny new $!
 $?  $CHILD_ERROR    -              Use shiny new $!
 $@  $EVAL_ERROR     -              Use shiny new $!
 $^E                 -              Use shiny new $!
 $^S                 -
 $. $NR              $*IN.input_record_number()
 $/ $RS              $*IN.input_record_separator()
 $|                  $*OUT.autoflush()
 $, $OFS             $*OUT.output_field_separator()
 $\                  $*OUT.output_record_separator()
 $" $LIST_SEPARATOR  -
 $; $SUBSEP          -
 $$ $PID             $*PID
 $< $UID             $*UID          Real UID (User ID)
 $( $GID             $*GID          Real GID (Group ID)
 $> $EUID            $*EUID         Effective UID
 $) $EGID            $*EGID         Effective GID
 $0 $PROGRAM_NAME    $*PROGRAM_NAME
 $^C $COMPILING      $*COMPILING
 $^D $DEBUGGING      $*DEBUGGING
 $^F $SYS_FD_MAX     $*SYS_FD_MAX   ...or some such
 $^I $INPLACE_EDIT   $*INPLACE_EDIT ...or some such
 $^M                 $*EMERGENCY_MEMORY ...or some such (or omit)
 $^O $OSNAME         $*OSNAME       ...or some such
 $^P $PERLDB         $*PERLDB       ...or some such
 $^R                 $*LAST_REGEXP_CODE_RESULT   ...or some such. Or omit.
 $^T $BASETIME       $*INITTIME     A Temporal::Instant object
 $^V $]              $?PERL.version
 $^W                 $*WARNINGS (if any dynamic control needed)
 ${^WARNING_BITS}    $?WARNINGS
 $^X                 $*EXECUTABLE_NAME ...or some such
 ARGV                $*ARGS         Note the P6 idiom for this handle:
                                    for =$*ARGS { 
                                      # each time through loop
                                      # proc a line from files named in ARGS 
                                    }
 @ARGV               @*ARGS
 ARGVOUT             TBD
 $ARGV               TBD
 @F                  @_
 %ENV                %*ENV
 @INC                @*INC (but not for std library modules)
 %INC                %*INC (maybe, if needed)
 %SIG                event filters plus exception translation
 $SIG{__WARN__}      $*ON_WARN
 $SIG{__DIE__}       $*ON_DIE
 ${^OPEN}            -              This was internal; forget it

=head1 NOT YET DEFINED

The following items are not yet defined, but will need to be defined.  

XXX Don't remove this line until this section is completely blank.  

=head2 Form.pm

These go in the Perl5 to Perl6 conversion table:

 Perl6   Perl5
 -----   -----------------------------------------
 -       $%  $FORMAT_PAGE_NUMBER
 -           HANDLE->format_page_number(EXPR)

 -       $=  $FORMAT_LINES_PER_PAGE
 -           HANDLE->format_lines_per_page(EXPR)

 -       $-  $FORMAT_LINES_LEFT
 -           HANDLE->format_lines_left(EXPR)

 -       $~  $FORMAT_NAME
 -           HANDLE->format_name(EXPR)

 -       $^  $FORMAT_TOP_NAME
 -           HANDLE->format_top_name(EXPR)

 -       $:  $FORMAT_LINE_BREAK_CHARACTERS
 -           IO::Handle->format_line_break_characters

 -       $^L $FORMAT_FORMFEED
 -           IO::Handle->format_formfeed

 -       $^A $ACCUMULATOR

=head2 S15-unicode.pod

${^ENCODING} and ${^UNICODE} variables

=head2 Infectious trait spec

${^TAINT} variable, which is pending, among other things, infectious trait spec

=head1 Additions

Please post errors and feedback to perl6-language.  If you are making
a general laundry list, please separate messages by topic.

=for vim:set expandtab sw=4:
