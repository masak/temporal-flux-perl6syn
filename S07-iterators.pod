=encoding utf8

=head1 Title

Synopsis 7: Iterators and Laziness

=head1 Version

 Maintainer:    ???
 Contributions: Tim Nelson <wayland@wayland.id.au>
                Daniel Ruoso <daniel@ruoso.com>
 Date:          27 Nov 2008
 Last Modified: 28 Dec 2008
 Version:       3

=head1 Laziness and Eagerness

As we all know, one of the primary virtues of the Perl programmer is
laziness.  This is also one of the virtues of Perl itself.  However,
Perl 6 knows better than to succumb to false laziness, and so is eager
sometimes, and lazy others.  

One thing that Perl understands is the difference between Laziness and
Eagerness.  When something is Lazy, it says "just give me what you've 
got; I'll get the rest later", whereas when it's eager, it says "More!  
More!  Give me everything you can get!".  

Perl 6 defines 4 levels of laziness:

=over

=item Strictly Lazy

Does not evaluate anything unless explictly required by the user,
including not traversing non-lazy objects.

=item Mostly Lazy

Try to obtain available items without causing eager evaluation of
other lazy objects.

=item Mostly Eager

Obtain all items, but does not try to eagerly evaluate when known to
be infinite.

=item Strictly Eager

Obtain all items, fail in data structures known to be infinite.

=back

It's important to realize that the responsability of determining the
level of lazyness/eagerness in each operation is external to each lazy
object, the runtime, depending on which operation is being performed,
is going to assume the level of lazyness and perform the needed
operations to apply that level.

=head2 The lazyness level of some common operations

=over

=item List Assignment: my @a = @something;

In order to provide p5-like behavior in list assignment, this
operation is performed in the Mostly Eager level, meaning that if you do

  my @a = grep { ... }, @b;

the grep will be evaluated as long as @b is not infinite.

  my @a = grep { ... }, 1, 2, 3, 4..*

will give grep an infinite list (even if the first elements are
known), therefore it will also be lazy. On the other hand

  my @a = grep { ... }, 1, 2, 3, 4;

will be eagerly evaluated. 

=item Feed operators: my @a <== @something;

The feed operator is strictly lazy, meaning that no operation should
be performed before the user requests any element. That's how

  my @a <== grep { ... } <== map { ... } <== grep { ... } <== 1, 2, 3

is completely lazy, even if 1,2,3 is a fairly small known compact
list.

=back

But it's important to notice that eagerness takes precedence over
lazyness, meaning that

  my @a = grep { ... } <== map { ... } <== grep { ... } <== 1, 2, 3

Will be eagerly evaluated, but that is still different from

  my @d = 1,2,3;
  my @c = grep { ... }, @d;
  my @b = map { ... }, @c;
  my @a = grep { ... }, @b;

Because in the first, the processing would be made as a flow, avoiding
the creation of the intermediary eager lists that the second example
creates. On the other hand

  my @d <== 1,2,3;
  my @c <== grep { ... }, @d;
  my @b <== map { ... }, @c;
  my @a = grep { ... }, @b;

provides the same lazyness level of the first example.

=head1 The Iterator Role

The iterator role represents the lazy access to a list, walking through:

=over

=item Data structure (list, tree, table, etc)

=item Feed (map, grep, etc) 

=item Stream (mostly for IO)

=item In fact, any value that wants to behave like a list

=back

It's important to realize that the iterator of a list can be accessed
by the .Iterator() method (but only the runtime will be calling that
most of the time), and the implemenation of each iterator is private
to the list and implementation specific.

This is a minimal API that should allow custom iterator
implementations, but this spec should be expanded in the future to
provide additional API for batch-aware iterators.

The methods in this role are:

=head2 method prefix:<=> {...}

Returns the items for that iteration. The grouping of elements
returned in each iteration is visible if this iterator is being used
to build a slice. While building a List, the items will be flattened.

When it runs out of items, it will throw an OutOfItemsException.  

=head1 The Iterator::PushBack Role

This role defines an iterator that knows how to receive values back to
be consumed again as if they were never consumed. The iterator is free
to refuse values that were not consumed first and in the correct
order, since this role is not intened to modify the original data,
only to modify the traversal of that data.

=head2 method pushback($value) {}

This pushes $value back to the array. If this iterator is proxying
immutable data, it is free to refuse a value that is either out of the
original order or if it wasn't consumed. In that case, it should fail
with UnorderedPushBackException or BadPushBackException.

=head1 The Iterator::Unshift Role

This role defines an iterator that can receive new elements in the top
of the stack, it works like pushback, but it should be able to store
objects that are completely new to this stream. Either by being backed
by a mutable list or by providing a local stack. This role implies
Iterator::PushBack, where pushback will be handled by unshift.

The purpose of defining two different Roles is to give the user the
"expect to fail" or "expect to succeed" semantics.

=head2 method unshift($value) {}

This unshifts $value either to the backed list or to a local stack of
the iterator.

=head1 Auxiliary Implementations

Perl's built-ins require that a number of auxiliary types.  

=head2 Generic Item Iterator

Operators like map requires one item at a time as input, therefore
they can use a generic item iterator to consolidate the access to the
input iterator, doing additional iterators when an empty capture is
returned and holding additional values if more than one item is
returned. The following code will result in getting a generic item
iterator:

  my $foo <== @a;

You can later do:

  my $item = =$foo;

=head2 Generic Lazy List

The generic lazy list accepts an iterator as input, and consumes the
iterator as the elements of the list are accessed but flattening and
storing the already-evaluated elements. To obtain a generic lazy list,
just do:

  my @a <== @b;

=head2 Generic Lazy Slice

The generic lazy slice accepts an iterator as input, and consumes the
iterator as the elements of the list are accessed but storing the
already-evaluated elements as a bi-dimensional list, where the first
dimension holds each iteration, and the second contains the return of
each iteration. To obtain a generic lazy slice, do:

  my @@a <== map { ... }, 1,2,3;

=head1 Additions

Please post errors and feedback to perl6-language.  If you are making
a general laundry list, please separate messages by topic.
